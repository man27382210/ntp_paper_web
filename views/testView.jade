extends layout

block body_content
	.page
		.center
			label 搜個詞吧！
			input#search_input(type="text", name="search_term" value="馬英九")
			button#search_btn 搜尋
			.visualization
				select#select_day(name="day")
				div#line
				table#simple_table.simple_table(style="width: 100%;")
					tr
						th(style="width: 25%;") termId
						th(style="width: 30%;") 相關詞彙
						th(style="width: 25%;") Tanimoto similarity 分數
						th(style="width: 10%;") 顯示時間變化
				
				div#bubble
block append init_script
	script(src="https://www.google.com/jsapi")
	script(src="http://d3js.org/d3.v3.min.js")

block body_script
	script.
		var dataLine = {};
		var dataUse = {};

		//google line init
		google.load("visualization", "1", {packages:["corechart"]});

		//d3 init
		var diameter = 960,
			format = d3.format(",d"),
			color = d3.scale.category20c();
		var bubble = d3.layout.pack()
			.sort(null)
			.size([diameter, diameter])
			.padding(1.5);
		var svg = d3.select("#bubble").append("svg")
			.attr("width", diameter)
			.attr("height", diameter)
			.attr("class", "bubble");
		function classes(root) {
			var classes = [];

			root.forEach(function(data){
				classes.push({packageName: data.value, className: data.term, value: data.value});
			});
			return {children: classes};
		}
		d3.select(self.frameElement).style("height", diameter + "px");


		//search btn click
		$('#search_btn').on('click',function(){
			$.ajax('/term', {
				type: 'POST',
				data:{search:$('#search_input').val()},
				success: function(data) {
					console.log(data);
					dataUse = data;
					var firstKey = "";
					var i = 0;
					for (var key in data["co_term"]){
						if(i == 0)
							firstKey = key;
						$("#select_day").append($("<option></option>").attr("value", key).text(key));
						i++;
					}
					changeVisual(firstKey);
					beforeDrawlBubble(firstKey);
				}
			});
		});
		
		//select change
		$("#select_day").change(function(){
			$( "#select_day option:selected" ).each(function() {
				changeVisual($(this).text());
				var keyDay = $(this).text();
				beforeDrawlBubble(keyDay);
			});
		});

		//table change
		function changeVisual(keyDay){
			$("#simple_table").find("tr:gt(0)").remove();
			for(var termKey in dataUse["co_term"][keyDay]) {
				var html = "<tr>";
				html = html+"<td>"+termKey+"</td>";
				html = html+"<td>"+dataUse["co_term"][keyDay][termKey]["co_term"]+"</td>";
				html = html+"<td>"+dataUse["co_term"][keyDay][termKey]["co_grade"]+"</td>";
				html = html+"<td><button class='co_term_btn' data-value="+termKey+">顯示時間變化</button></td>";
				html += "</tr>"
				$('#simple_table > tbody:last').append(html);
			}
		}

		function beforeDrawlBubble(keyDay){
			var bubbleArr = [];
			for (var termKey in dataUse['co_term'][keyDay]){
				var termUse = {};
				termUse['term'] = dataUse['co_term'][keyDay][termKey]['co_term'];
				termUse['value'] = dataUse['co_term'][keyDay][termKey]['co_grade'];
				bubbleArr.push(termUse);
			} 
			drawBubble(bubbleArr);
		}

		//table button click
		$('body').on({
			click: function() {
				console.log("hello!!!!");
				var term_id = $(this).data('value');
				console.log(term_id);
				var arrayForLine = [];
				for(var dayKey in dataUse["co_term"]) {
					if(dataUse["co_term"][dayKey].hasOwnProperty(term_id)){ //到這步是找每個日期中該term得值
						var dict = {};
						dict['time'] = dayKey;
						dict['term'] = dataUse["co_term"][dayKey][term_id]["co_term"];
						dict['grade'] = dataUse["co_term"][dayKey][term_id]["co_grade"];
						arrayForLine.push(dict);
					}
				}
				drawHourly(arrayForLine);
			}
		},'.co_term_btn');


		//google line draw function
		function drawHourly(arr) {
			//- var data = dataLine;
			var chart_data = [['Hour', 'Co-grade']];
			var limit = arr.length;
			var vtitle = [];
			for (var i=0; i<limit; i++) {
				chart_data.push([
					arr[i]["time"],
					parseFloat(arr[i]["grade"])
				]);
				vtitle.push(i);
			}
			console.log(chart_data);
			chart_data = google.visualization.arrayToDataTable(chart_data);
			var dom = $('#line').get(0);
			var chart = new google.visualization.LineChart(dom);
			var options = {
				title: arr[0]['term'],
				backgroundColor: 'transparent',
				hAxis: { ticks: vtitle }
			}
			chart.draw(chart_data, options);
		}


		//d3 bubble drawl
		function drawBubble(data) {

			var node = svg.selectAll(".node")
				.data(
				bubble.nodes(classes(data)).filter(function (d){return !d.children;}),
				function(d) {return d.className} // key data based on className to keep object constancy
				);


			var nodeEnter = node.enter()
				.append("g")
				.attr("class", "node")
				.attr("transform", function (d) {
				    return "translate(" + d.x + "," + d.y + ")";
				});
			nodeEnter
				.append("circle")
				.attr("r", function (d) {return d.r;})
				.style("fill", function (d, i) {return color(i);})

				// re-use enter selection for titles
			nodeEnter
				.append("title")
				.text(function (d) {
				return d.className + ": " + format(d.value);
				});

			node.select("circle")
				.transition().duration(1000)
				.attr("r", function (d) {
				return d.r;
				})
				.style("fill", function (d, i) {
				return color(i);
				});

				node.transition().attr("class", "node")
				.attr("transform", function (d) {
				return "translate(" + d.x + "," + d.y + ")";
				});

			node.exit().remove();

			node.append("text")
				.attr("dy", ".3em")
				.style("text-anchor", "middle")
				.text(function(d) { 
					return d.className.substring(0, d.r / 3); 
				});
		}